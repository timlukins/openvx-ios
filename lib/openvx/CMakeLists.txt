#
# Copyright (c) 2011-2014 The Khronos Group Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and/or associated documentation files (the
# "Materials"), to deal in the Materials without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Materials, and to
# permit persons to whom the Materials are furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Materials.
#
# THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
#

#
# Global setup file for OpenVX CMake
#
cmake_minimum_required(VERSION 2.8.12)

# CMAKE variables
set( CMAKE_MODULE_PATH
     ${CMAKE_MODULE_PATH}
     "${CMAKE_SOURCE_DIR}/cmake_utils/"
)

include( cmake_utils/CMakeFuncs.txt )

if (WIN32)
    include( CMake_windows_tools )
elseif (ANDROID)
    include( CMake_android_tools )
elseif (APPLE)
		include( CMake_apple_tools )
	  # TODO: added this to remove RPATH policy, why?
	  cmake_policy(SET CMP0042 NEW)
		# Use old policy to find location of libs for copy/remove
		#cmake_policy(SET CMP0026 OLD)
else ()
    include( CMake_linux_tools )
endif ()

project (OpenVX)

# Supported configurations
set(CMAKE_CONFIGURATION_TYPES
    "Debug"
    "Release"
  )
set(CMAKE_CONFIGURATION_TYPES ${CMAKE_CONFIGURATION_TYPES} CACHE STRING "Available build configurations." FORCE)
	
# Version Info (should be passed in via -D flags from build)...
set(VERSION_MAJOR "1" CACHE STRING "Major version number")
set(VERSION_MINOR "0" CACHE STRING "Minor version number")
set(VERSION_PATCH "4" CACHE STRING "Patch version number")

message(STATUS "************** BUILDING VERSION: ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH} ************")

option( OPENVX_USE_TILING OFF )
option( EXPERIMENTAL_USE_NODE_MEMORY OFF )
option( EXPERIMENTAL_USE_OPENMP OFF )
option( EXPERIMENTAL_USE_OPENCL OFF )
option( EXPERIMENTAL_USE_DOT OFF )
option( EXPERIMENTAL_USE_XML OFF )
option( EXPERIMENTAL_USE_TARGET OFF )
option( EXPERIMENTAL_USE_VARIANTS OFF )
option( EXPERIMENTAL_USE_S16 OFF )
option( EXPERIMENTAL_PLATFORM_SUPPORTS_16_FLOAT OFF )


# NOTE: APPLE (in cmake) is a type of UNIX!
if (UNIX OR ANDROID)
    add_definitions( -D_XOPEN_SOURCE=700 -D_BSD_SOURCE=1 -D_GNU_SOURCE=1 )
	  # TODO: removed as was overriding openmp on macos
		# There is no openmp for clang yet (see: http://clang-omp.github.io)	
		if (NOT (CYGWIN OR ANDROID OR APPLE))
		    set( EXPERIMENTAL_USE_OPENMP ON )
		endif (NOT (CYGWIN OR ANDROID OR APPLE))
    set( EXPERIMENTAL_USE_DOT ON )
endif (UNIX OR ANDROID)


add_definitions( -DOPENVX_BUILDING ) 
if (OPENVX_USE_SMP)
    add_definitions( -DOPENVX_USE_SMP )
endif (OPENVX_USE_SMP)
if (OPENVX_USE_TILING)
    add_definitions( -DOPENVX_USE_TILING )
endif (OPENVX_USE_TILING)
if (EXPERIMENTAL_USE_NODE_MEMORY)
    add_definitions( -DEXPERIMENTAL_USE_NODE_MEMORY )
endif (EXPERIMENTAL_USE_NODE_MEMORY)
if (EXPERIMENTAL_USE_OPENMP)
    add_definitions( -DEXPERIMENTAL_USE_OPENMP )
endif (EXPERIMENTAL_USE_OPENMP)
if (EXPERIMENTAL_USE_OPENCL)
    add_definitions( -DEXPERIMENTAL_USE_OPENCL )
endif (EXPERIMENTAL_USE_OPENCL)
if (EXPERIMENTAL_USE_DOT)
    add_definitions( -DEXPERIMENTAL_USE_DOT )
endif (EXPERIMENTAL_USE_DOT)
if (EXPERIMENTAL_USE_XML)
    add_definitions( -DEXPERIMENTAL_USE_XML )
endif (EXPERIMENTAL_USE_XML)
if (EXPERIMENTAL_USE_TARGET)
    add_definitions( -DEXPERIMENTAL_USE_TARGET )
endif (EXPERIMENTAL_USE_TARGET)
if (EXPERIMENTAL_USE_VARIANTS)
    add_definitions( -DEXPERIMENTAL_USE_VARIANTS )
endif (EXPERIMENTAL_USE_VARIANTS)
if (EXPERIMENTAL_USE_S16)
    add_definitions( -DEXPERIMENTAL_USE_S16 )
endif (EXPERIMENTAL_USE_S16)
if (EXPERIMENTAL_PLATFORM_SUPPORTS_16_FLOAT)
    add_definitions( -DEXPERIMENTAL_PLATFORM_SUPPORTS_16_FLOAT )
endif (EXPERIMENTAL_PLATFORM_SUPPORTS_16_FLOAT)

if (BUILD_X64)
    add_definitions( -DARCH_64 )
else (BUILD_X64)
    add_definitions( -DARCH_32 )
endif (BUILD_X64)

if (CMAKE_BUILD_TYPE EQUAL Debug)
    add_definitions( -DOPENVX_DEBUGGING )
endif (CMAKE_BUILD_TYPE EQUAL Debug)

if ( EXPERIMENTAL_USE_OPENCL )
    if (DEFINED ENV{VX_OPENCL_INCLUDE_PATH})
        set( OPENCL_INCLUDE_PATH $ENV{VX_OPENCL_INCLUDE_PATH} )
        message( "Use OpenCL headers from: " ${OPENCL_INCLUDE_PATH} )
	else(DEFINED ENV{VX_OPENCL_INCLUDE_PATH})
	    set( OPENCL_INCLUDE_PATH )
	    message( "Use OpenCL headers from system default location, in order to set specific path: please set 'VX_OPENCL_INCLUDE_PATH' env. variable and reconfigure")
	endif (DEFINED ENV{VX_OPENCL_INCLUDE_PATH})
	if (DEFINED ENV{VX_OPENCL_LIB_PATH})
        set( OPENCL_LIB_PATH $ENV{VX_OPENCL_LIB_PATH} )
	    message( "Use OpenCL headers from: " ${OPENCL_LIB_PATH} )
	else(DEFINED ENV{VX_OPENCL_LIB_PATH})
	    message( "Use OpenCL libs from system default location, in order to set specific path: please set 'VX_OPENCL_LIB_PATH' env. variable and reconfigure")
    endif (DEFINED ENV{VX_OPENCL_LIB_PATH})
endif ( EXPERIMENTAL_USE_OPENCL )

FIND_NUM_PROCESSORS()
if ( ${PROCESSOR_COUNT} LESS "1" )
	message(FATAL_ERROR "Num processors found is " ${PROCESSOR_COUNT})
endif ( ${PROCESSOR_COUNT} LESS "1" )
add_definitions( -DTARGET_NUM_CORES=${PROCESSOR_COUNT} )

# Framework IDE Folders Names
set_property( GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER "" )
set_property( GLOBAL PROPERTY USE_FOLDERS ON )
set( DEBUG_FOLDER Debug )
set( EXAMPLES_FOLDER Examples )
set( HELPER_FOLDER Helper )
set( KERNELS_FOLDER Kernels )
set( LIBRARIES_FOLDER Libraries )
set( LIBRARIES_DEBUG_FOLDER ${LIBRARIES_FOLDER}/Debug )
set( LIBRARIES_EXTRAS_FOLDER ${LIBRARIES_FOLDER}/Extras )
set( SAMPLE_FOLDER Sample )
set( SAMPLE_TARGETS_FOLDER ${SAMPLE_FOLDER}/Targets )
set( SAMPLE_CPP_FOLDER SampleCPP )
set( TOOLS_FOLDER Tools )


add_subdirectory( debug )
if (NOT APPLE) # Don't bother for Apple
	add_subdirectory( examples )
	add_subdirectory( tools )
endif (NOT APPLE)
add_subdirectory( helper )
add_subdirectory( kernels )
add_subdirectory( libraries )
add_subdirectory( sample )

add_subdirectory( include )

# Unit tests!
enable_testing()
add_subdirectory(test)

#########################################
# NB. the following is historic!
# It is only used to create a "dummy"
# Xcodeproject when building with the 
# iOS.cmake toolchain.
#########################################

# Added custom target to tie this all together
# With some custom commands to build framework...

# NB> still have to use xcodebuild to invoke - but works! 
# > xcodebuild -target ios-sample -configuration Release

# See: http://www.cmake.org/gitweb?p=cmake.git;a=blob;f=Tests/iOSNavApp/CMakeLists.txt

if (APPLE AND IOS)
	message(STATUS "Configuring to build sample iOS framework for ${CMAKE_BUILD_TYPE}...")
	
	set(HEADERS
	  ${CMAKE_SOURCE_DIR}/include/OpenVX/vx_api.h
	  ${CMAKE_SOURCE_DIR}/include/OpenVX/vx_kernels.h
	  ${CMAKE_SOURCE_DIR}/include/OpenVX/vx_nodes.h
	  ${CMAKE_SOURCE_DIR}/include/OpenVX/vx_types.h
	  ${CMAKE_SOURCE_DIR}/include/OpenVX/vx_vendors.h
	  ${CMAKE_SOURCE_DIR}/include/OpenVX/vx.h
	  ${CMAKE_SOURCE_DIR}/include/OpenVX/vxu.h
	  ${CMAKE_SOURCE_DIR}/debug/vx_debug.h
	)
	
	#get_property(DUMMY_LIB TARGET openvx PROPERTY LOCATION)
	#get_property(STATIC_LIB TARGET openvx-lib PROPERTY LOCATION)
	#get_property(MODEL_LIB TARGET openvx-c_model PROPERTY LOCATION)
	#MESSAGE (STATUS "LIB LOCATIONS == ${DUMMY_LIB} ${STATIC_LIB} ${MODEL_LIB}")

	# Custom target to remove/add libs correctly... 
	#add_custom_target(openvx-copylibs # ALL DEPENDS "on/file"
	#		COMMAND "rm ${DUMMY_LIB};")
			
	# Dummy shared lib - NOTE use of capitals for case sensitive disambiguation!
	add_library(OpenVX SHARED ${HEADERS})
	
	# Make this dependent on the following
	add_dependencies(OpenVX openvx-lib openvx-c_model openvx-extras openvx-accelerate)
	#add_dependencies(openvx openvx-copylibs)

	# Do this to set it to compile only with headers...	
	set_target_properties(OpenVX PROPERTIES LINKER_LANGUAGE CXX)
	
	# Could add this below to specify other files... RESOURCE "${RESOURCES}"
	set_target_properties(OpenVX PROPERTIES	
		FRAMEWORK TRUE
		XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY ${IOS_CODE_SIGN_ID}
		MACOSX_FRAMEWORK_IDENTIFIER "com.machineswithvision.openvx" # N.B. Used to load dynamic libs from bundle!
		FRAMEWORK_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}
		MACOSX_FRAMEWORK_SHORT_VERSION_STRING ${VERSION_MAJOR}.${VERSON_MINOR}.${VERSION_PATCH}
		MACOSX_FRAMEWORK_BUNDLE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})

	# NOTE: this is the fix for the "proper" location of headers (to be symlinked in framework)...	
	#set_property(SOURCE ${HEADERS} PROPERTY MACOSX_PACKAGE_LOCATION /Versions/A/Headers/VX)
	set_property(SOURCE ${HEADERS} PROPERTY MACOSX_PACKAGE_LOCATION /Versions/A/Headers/)
	
	set_xcode_property(OpenVX IPHONEOS_DEPLOYMENT_TARGET ${IOS_DEPLOYMENT_TARGET})	

endif (APPLE AND IOS)

